# Load all the RT modules that will be needed
# kinematics
loadrt [KINS]KINEMATICS

# trajectory planner
#loadrt tp

# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS

#Charge-pump - creates signal which can serve as watchdog in external hardware (connected to power relay)
#loadrt charge_pump
#net estop-out charge-pump.enable iocontrol.0.user-enable-out
#net charge-pump <= charge-pump.out

# Dir mask and an exclude mask
#
# ------------------outputs-----------------
# GPIO 2,3,4 for xtep ystep zstep
# GPIO 12 for spindle motor on
# GPIO 14,15,18 for xdir ydir zdir
# ------------------inputs-----------------
# GPIO 17,27,22 for xlim ylim zlim (used for + and - lims, used for home also)
#
# gpio pins (NOT RPI pins!)
# 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 
# 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2  (gpio 1 & 0 not used)
#
# 1 3 2 1 1 1 4 3 3 1 1 3 1   3 3 2 1 2 2 2 3 2      
# 3 7 2 8 6 5 0 8 5 2 1 6 0 8 3 2 3 9 1 4 6 1 9 7 5 3   - RPI pins   
#
# 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1  dir     mask (0 means IN   1 means OUT)       dec 78855
# 0 1 1 1 1 1 0 1 1 0 0 1 0 0 1 0 1 1 1 1 1 1 1 0 0 0  exclude mask (0 means USE  1 means DON'T USE) dec 32918520
loadrt hal_gpio dir=78855 exclude=32918520

#Software stepgen (2 of them) in mode 0 (step/dir)
loadrt stepgen step_type=0,0

# --- begin addf s
addf hal_gpio.read  base-thread
addf hal_gpio.write base-thread
addf stepgen.make-pulses base-thread
#addf charge-pump base-thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf stepgen.capture-position servo-thread
addf stepgen.update-freq servo-thread
# --- end addf s

#GPIO 2,3 for Xstep Ystep, thats RPi pins 3,5
net xstep stepgen.0.step => hal_gpio.pin-03-out
net ystep stepgen.1.step => hal_gpio.pin-05-out

#GPIO 14,15 for Xdir Ydir, thats RPi pins 8,10
net xdir  stepgen.0.dir  => hal_gpio.pin-08-out
net ydir  stepgen.1.dir  => hal_gpio.pin-10-out

#net charge-pump => pick a gpio

#First axis
setp stepgen.0.position-scale [JOINT_0]SCALE
setp stepgen.0.steplen 4000
setp stepgen.0.stepspace 500
setp stepgen.0.dirhold 20000
setp stepgen.0.dirsetup 1000
setp stepgen.0.maxaccel [JOINT_0]STEPGEN_MAXACCEL
net xpos-cmd axis.0.motor-pos-cmd => stepgen.0.position-cmd
net xpos-fb stepgen.0.position-fb => axis.0.motor-pos-fb
net xstep <= stepgen.0.step
net xdir <= stepgen.0.dir
net xenable axis.0.amp-enable-out => stepgen.0.enable

#Second axis
setp stepgen.1.position-scale [JOINT_1]SCALE
setp stepgen.1.steplen 4000
setp stepgen.1.stepspace 500
setp stepgen.1.dirhold 20000
setp stepgen.1.dirsetup 1000
setp stepgen.1.maxaccel [JOINT_1]STEPGEN_MAXACCEL
net ypos-cmd axis.1.motor-pos-cmd => stepgen.1.position-cmd
net ypos-fb stepgen.1.position-fb => axis.1.motor-pos-fb
net ystep <= stepgen.1.step
net ydir <= stepgen.1.dir
net yenable axis.1.amp-enable-out => stepgen.1.enable

net estop-out <= iocontrol.0.user-enable-out
net estop-out => iocontrol.0.emc-enable-in
